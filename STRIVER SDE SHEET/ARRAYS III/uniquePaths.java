// THE PROBLEM STATEMENT IS TO FIND NUMBER OF UNIQUE PATHS FROM THE TOP - LEFT CELL TO THE
// BOTTOM - RIGHT CELL OF THE MATRIX m x n. AT EACH CELL, YOU CAN EITHER MOVE TO THE BOTTOM OR TO THE LEFT
// CELL IN THE MATRIX.

// THE BRUTE FORCE APPROACH IS TO EXPLORE ALL THE PATHS FROM THE TOP RIGHT CELL
// OF THE MATRIX TO BOTTOM LEFT OF THE MATRIX USING RECURSION.
// TIME COMPLEXITY : O(2^(M+N))
// SPACE COMPLEXITY : O(M+N)

// THE OPTIMISED APPROACH WOULD BE TO USE DYNAMIC PROGRAMMING. WELL, EVEN IN THAT CASE,
// THERE ARE TWO WAYS, ONE IS TO USE TOP-DOWN APPROACH AND THE OTHER ONE IS TO USE BOTTOM APPROACH.
// BUT THE INTUITION IS SAME BEHIND BOTH THE APPROACHES RATHER THAN EXPLORING ALL THE POSSIBLE PATHS, THERE WILL
// BE SOME PATHS WHICH IS GOING TO BE VISITED MORE THAN ONCE, SO INORDER TO AVOID REPETITION, WE USE THESE
// APPROACHES. I HAVE IMPLEMENTED THE BOTTOM UP APPROACH. IN CASE OF BOTTOM - UP APPRAOCH,
// EACH CELL VALUE IS THE SUM OF CELL VALUE AT THE TOP AND THE LEFT CELL. THE BASE CASE IS THAT, THE VALUE
// FIRST RO AND COLUMN IS ALWAYS ONE.
// TIME COMPLEXITY : O(N*M)
// SPACE COMPLEXITY : O(N*M)

import java.util.* ;
import java.io.*;

public class Solution
{
	public static int uniquePaths(int m, int n)
    {
		    int[][] dp = new int[m][n];

        for(int i=0;i<m;i++)
        {
            dp[i][0] = 1;
        }

        for(int j=0;j<n;j++)
        {
            dp[0][j] = 1;
        }

        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                dp[i][j] = dp[i-1][j]+dp[i][j-1];
            }
        }

        return dp[m-1][n-1];
	}
}
